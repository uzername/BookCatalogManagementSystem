@page "/catalog"
@using System.Net.Http.Json
@using BCMS_FrontendBlazor.Models
@using System.Text
@inject HttpClient httpClient
@inject IConfiguration configuration

<h3>Book Catalog</h3>

<p> Here is a list of books if <a href="/">you have previously uploaded</a> them from csv file. If you wish to filter then type in value and slam Enter button, it should work I think.</p>

@* Here it is https://mudblazor.com/components/table *@

<MudTable Items="@Elements" Dense="@dense" FixedHeader="false" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Book,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Book List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.Id)">Id</MudTableSortLabel> </MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.BookAuthor)">Book Author</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.BookTitle)">Book Title</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.CategoryName)">Genre</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.ParentCategoryName)">Parent Genre</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="BookAuthor">@context.BookAuthor</MudTd>
        <MudTd DataLabel="Name">@context.BookTitle</MudTd>
        <MudTd DataLabel="CategoryName">@context.CategoryName</MudTd>
        <MudTd DataLabel="ParentCategoryName">@context.ParentCategoryName</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudPaper Class="pa-2 ma-2" Elevation="3">

    <div class="container mt-4">
        <!-- First Row : caption and 2 buttons -->
        <div class="row align-items-center">
            <div class="col-12 col-md d-flex align-items-center">
                <span class="me-2">Now editing:</span>
                <span id="editable-text"></span>
            </div>
            <div class="col-12 col-md-auto mt-3 mt-md-0 text-end">
                <button class="btn btn-danger me-2" @onclick="DeleteEntryNow">DELETE</button>
                <button class="btn btn-success" @onclick="EditEntryNow">SAVE CHANGES</button>
            </div>
        </div>

        <!-- Second Row : Author -->
        <div class="row m-1 align-items-center">
            <div class="col-12 col-md-auto">
                <span class="font-monospace">Author:&nbsp;&nbsp;&nbsp;&nbsp;</span>
            </div>
            <div class="col-12 col-md">
                <MudTextField @bind-Value="TextValueAuthor" Label="Enter author name" Variant="Variant.Text"></MudTextField>
            </div>
        </div>

        <!-- Third Row : Title -->
        <div class="row m-1 align-items-center">
            <div class="col-12 col-md-auto">
                <span class="font-monospace">Book Title:</span>
            </div>
            <div class="col-12 col-md">
                <MudTextField @bind-Value="TextValueBookTitle" Label="Enter Book Title" Variant="Variant.Text"></MudTextField>
            </div>
        </div>

        <!-- Fourth row : Category picker -->
        <div class="row m-1 align-items-center">
            <div class="col-12 col-md-auto">
                <span class="font-monospace">Choose Genre:</span>
            </div>
            <div class="col-12 col-md">

                <MudSelect @bind-Value="ValueChosenCategory"
                Label="Genre"
                Dense="false"
                Disabled="false"
                ReadOnly="true"
                Placeholder="choose genre"
                HelperText="list of genres and subgenres">

                </MudSelect>
            </div>
        </div>

    </div>

</MudPaper>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Book selectedItem1 = null;
    private HashSet<Book> selectedItems = new HashSet<Book>();

    private IEnumerable<Book> Elements = new List<Book>();

    public string TextValueAuthor;
    public string TextValueBookTitle;
    public Category ValueChosenCategory;

    private async Task fetchElements()
    {
        StringBuilder apiPath = new StringBuilder();
        apiPath.Append(configuration.GetValue<string>("APIProtocol"));
        apiPath.Append(configuration.GetValue<string>("APIHost"));
        apiPath.Append(":");
        apiPath.Append(configuration.GetValue<string>("APIPort"));
        StringBuilder queryPathGET = new StringBuilder();
        queryPathGET.Append(APIConstantsDef.API_ROOT); queryPathGET.Append("/");
        queryPathGET.Append(APIConstantsDef.API_BOOK);
        string apiEndpoint = apiPath.ToString() + "/" + queryPathGET.ToString();
        Elements = await httpClient.GetFromJsonAsync<List<Book>>(apiEndpoint);
    }

    protected override async Task OnInitializedAsync()  {
        await fetchElements();
    }

    private bool FilterFunc1(Book element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Book element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BookAuthor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.BookTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ParentCategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.BookAuthor} {element.BookTitle}".Contains(searchString))
            return true;
        return false;
    }
    /// <summary>
    /// Delete button Handler
    /// </summary>
    private void DeleteEntryNow(MouseEventArgs e)
    {

    }
    /// <summary>
    /// Edit Button Handler
    /// </summary>
    private void EditEntryNow(MouseEventArgs e)
    {
        
    }
}