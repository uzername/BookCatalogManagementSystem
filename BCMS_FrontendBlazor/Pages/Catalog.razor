@page "/catalog"
@using System.Net.Http.Json
@using BCMS_FrontendBlazor.Models
@using System.Text
@inject HttpClient httpClient
@inject IConfiguration configuration
@inject IJSRuntime JS

<h3>Book Catalog</h3>

<p> Here is a list of books if <a href="/">you have previously uploaded</a> them from csv file. If you wish to filter then type in value and slam Enter button, it should work I think.</p>

@* Here it is https://mudblazor.com/components/table *@

<MudTable Items="@Elements" Dense="@dense" FixedHeader="false" Hover="@hover" Bordered="@bordered" Striped="@striped" 
    Filter="new Func<Book,bool>(FilterFunc1)" MultiSelection="false" T="Book" SelectedItemChanged="@onSelectionChangedTable">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Book List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.Id)">Id</MudTableSortLabel> </MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.BookAuthor)">Book Author</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.BookTitle)">Book Title</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.CategoryName)">Genre</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.ParentCategoryName)">Parent Genre</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="BookAuthor">@context.BookAuthor</MudTd>
        <MudTd DataLabel="Name">@context.BookTitle</MudTd>
        <MudTd DataLabel="CategoryName">@context.CategoryName</MudTd>
        <MudTd DataLabel="ParentCategoryName">@context.ParentCategoryName</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudPaper Class="pa-2 ma-2" Elevation="3">

    <div class="container mt-4">
        <!-- First Row : caption and 2 buttons -->
        <div class="row align-items-center">
            <div class="col-12 col-md d-flex align-items-center">
                <span class="me-2">Now editing: </span>
                <MudText Inline="true">@NowEditingValue</MudText>
            </div>
            <div class="col-12 col-md-auto mt-3 mt-md-0 text-end">
                <button class="btn btn-danger me-2" @onclick="DeleteEntryNow">DELETE</button>
                <button class="btn btn-success" @onclick="EditEntryNow">SAVE CHANGES</button>
            </div>
        </div>

        <!-- Second Row : Author -->
        <div class="row m-1 align-items-center">
            <div class="col-12 col-md-auto">
                <span class="font-monospace">Author:&nbsp;&nbsp;&nbsp;&nbsp;</span>
            </div>
            <div class="col-12 col-md">
                    <MudTextField @bind-Value="TextValueAuthor" Label="Enter author name" Variant="Variant.Text"></MudTextField>
            </div>
        </div>

        <!-- Third Row : Title -->
        <div class="row m-1 align-items-center">
            <div class="col-12 col-md-auto">
                <span class="font-monospace">Book Title:</span>
            </div>
            <div class="col-12 col-md">
                <MudTextField @bind-Value="TextValueBookTitle" Label="Enter Book Title" Variant="Variant.Text"></MudTextField>
            </div>
        </div>

        <!-- Fourth row : Category picker -->
        <div class="row m-1 align-items-center">
            <div class="col-12 col-md-auto">
                <span class="font-monospace">Book Genre:</span>
            </div>
            <div class="col-12 col-md">
                    <InputSelect id="genre-select" @bind-Value="ValueChosenCategoryId" class="form-control"> 
                        @foreach (var genre in ElementsCategories)
                            {
                                string genreName = "";
                                @if (String.IsNullOrEmpty(genre.ParentCategoryName))
                                {
                                    genreName = genre.CategoryName;
                                }
                                else
                                {
                                    genreName = genre.ParentCategoryName +" >> "+ genre.CategoryName;
                                }
                                    <option Value="@genre.Id"> @genreName</option>
                            } 
                    </InputSelect>
                
            </div>
        </div>

    </div>

</MudPaper>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Book selectedItem1 = null;
    private HashSet<Book> selectedItems = new HashSet<Book>();

    private IEnumerable<Book> Elements = new List<Book>();
    private IEnumerable<Category> ElementsCategories = new List<Category>();

    public string NowEditingValue;
    public string TextValueAuthor;
    public string TextValueBookTitle;
    public int ValueChosenCategoryId;

    void onSelectionChangedTable(Book selB)
    {
        selectedItem1 = selB;
        NowEditingValue = selB.ToString();
        TextValueAuthor = selB.BookAuthor;
        TextValueBookTitle = selB.BookTitle;
        ValueChosenCategoryId = selB.IdCategory;
    }

    private async Task fetchElements()
    {
        StringBuilder apiPath = new StringBuilder();
        apiPath.Append(configuration.GetValue<string>("APIProtocol"));
        apiPath.Append(configuration.GetValue<string>("APIHost"));
        apiPath.Append(":");
        apiPath.Append(configuration.GetValue<string>("APIPort"));
        StringBuilder queryPathGET = new StringBuilder();
        queryPathGET.Append(APIConstantsDef.API_ROOT); queryPathGET.Append("/");
        queryPathGET.Append(APIConstantsDef.API_BOOK);
        string apiEndpoint = apiPath.ToString() + "/" + queryPathGET.ToString();
        Elements = await httpClient.GetFromJsonAsync<List<Book>>(apiEndpoint);
    }
    private async Task fetchCategories()
    {
        StringBuilder apiPath = new StringBuilder();
        apiPath.Append(configuration.GetValue<string>("APIProtocol"));
        apiPath.Append(configuration.GetValue<string>("APIHost"));
        apiPath.Append(":");
        apiPath.Append(configuration.GetValue<string>("APIPort"));
        StringBuilder queryPathGET = new StringBuilder();
        queryPathGET.Append(APIConstantsDef.API_ROOT); queryPathGET.Append("/");
        queryPathGET.Append(APIConstantsDef.API_CATEGORY);

        var httpClient = new HttpClient();
        string apiEndpoint = apiPath.ToString() + "/" + queryPathGET.ToString();
        ElementsCategories = await httpClient.GetFromJsonAsync<List<Category>>(apiEndpoint);
    }

    protected override async Task OnInitializedAsync()  {
        // async await waltz
        await fetchCategories();
        await fetchElements();
    }

    private bool FilterFunc1(Book element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Book element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BookAuthor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.BookTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ParentCategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.BookAuthor} {element.BookTitle}".Contains(searchString))
            return true;
        return false;
    }

    /// <summary>
    /// Delete button Handler
    /// </summary>
    private async Task DeleteEntryNow(MouseEventArgs e)
    {
        if (selectedItem1 == null)  {
            await JS.InvokeVoidAsync("Alert", "Please select item to delete");
            return;
        }

        // deletion code
        StringBuilder apiPath = new StringBuilder();
        apiPath.Append(configuration.GetValue<string>("APIProtocol"));
        apiPath.Append(configuration.GetValue<string>("APIHost"));
        apiPath.Append(":");
        apiPath.Append(configuration.GetValue<string>("APIPort"));
        StringBuilder queryPathDELETE = new StringBuilder();
        queryPathDELETE.Append(APIConstantsDef.API_ROOT); queryPathDELETE.Append("/");
        queryPathDELETE.Append(APIConstantsDef.API_BOOK);
        string apiEndpoint = apiPath.ToString() + "/" + queryPathDELETE.ToString() +"/"+ selectedItem1.Id.ToString();
        await httpClient.DeleteAsync(apiEndpoint);
        // get elements once again
        await fetchElements();
        // reset form because element was deleted
        string prevEditingValue = NowEditingValue;
        selectedItem1 = null;
        NowEditingValue = "";
        TextValueAuthor = "";
        TextValueBookTitle = "";
        await JS.InvokeVoidAsync("Alert", $"Deletion of {prevEditingValue} complete");
    }
    /// <summary>
    /// Edit Button Handler. Actually it should apply changes
    /// </summary>
    private async Task EditEntryNow(MouseEventArgs e)
    {
        if (selectedItem1 == null)   {
            await JS.InvokeVoidAsync("Alert", "Please select item to apply changes");
            return;
        }
        // saving code
        StringBuilder apiPath = new StringBuilder();
        apiPath.Append(configuration.GetValue<string>("APIProtocol"));
        apiPath.Append(configuration.GetValue<string>("APIHost"));
        apiPath.Append(":");
        apiPath.Append(configuration.GetValue<string>("APIPort"));
        StringBuilder queryPathUPDATE = new StringBuilder();
        queryPathUPDATE.Append(APIConstantsDef.API_ROOT); queryPathUPDATE.Append("/");
        queryPathUPDATE.Append(APIConstantsDef.API_BOOK);
        string apiEndpoint = apiPath.ToString() + "/" + queryPathUPDATE.ToString() + "/" + selectedItem1.Id.ToString();
        Book modifiedBook = new Book { Id = selectedItem1.Id,
                BookAuthor = selectedItem1.BookAuthor, BookTitle = selectedItem1.BookTitle,
                CategoryName = selectedItem1.CategoryName, ParentCategoryName = selectedItem1.ParentCategoryName, IdCategory = selectedItem1.IdCategory };
        modifiedBook.IdCategory = ValueChosenCategoryId;
        modifiedBook.BookAuthor = TextValueAuthor;
        modifiedBook.BookTitle = TextValueBookTitle;
        await httpClient.PutAsJsonAsync(apiEndpoint, modifiedBook);

    }
}