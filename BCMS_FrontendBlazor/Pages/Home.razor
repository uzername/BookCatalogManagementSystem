@page "/"
@using System.Text
@using System.Net.Http
@inject IConfiguration configuration
@inject IHttpClientFactory ClientFactory
<PageTitle>Home</PageTitle>

<h1>Book Catalog Management System</h1>

<p>This is a <span class="fw-bold">Book Catalog Management System</span> that allows users to manage and track a collection of books. </p>
<p>Users should be able to:</p>
<ul>
    <li>view the list of books in a table format. </li>
    <li>search and filter books by title, author, and genre.</li>
    <li>add new books to the catalog via a form. </li>
    <li>update book details. </li>
    <li>delete books from the catalog. </li>
</ul>
<p>UI has a responsive design that works seamlessly on both desktop and mobile devices.</p>
<p>Data won't be persisted because it is stored in memory <br/> 
 (it was explicitly stated: <span class="font-monospace">Database: In-memory storage</span> ) <br/>
 But you may Remove everything and Upload from CSV file</p>
<div class="container">
    <div class="row">
        <label for="useFile">Choose a CSV File:</label>
        <input type="file" id="useFile" name="useFile" accept=".csv"/>
    </div>
    <div class="row mx-1">
        <label class="checkbox-inline"> <InputCheckbox @bind-Value="valueRemoveBooksGenres" /> &nbsp;&nbsp;&nbsp;Remove entered books and genres</label>
    </div>
    <button class="btn btn-primary" @onclick="UploadFileNow">UPLOAD FILE</button>
</div>
@code {
    // <input type="checkbox" id="removeBooksAndGenres" name="removeBooksAndGenres" bind="@valueRemoveBooksGenres" />
    bool valueRemoveBooksGenres { get; set; } = true;
    // https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-9.0
    private async void UploadFileNow(MouseEventArgs e)
    {
        StringBuilder apiPath = new StringBuilder();
        apiPath.Append(configuration.GetValue<string>("APIProtocol"));
        apiPath.Append(configuration.GetValue<string>("APIHost"));
        apiPath.Append(":");
        apiPath.Append(configuration.GetValue<string>("APIPort"));
        StringBuilder queryPathUpdate = new StringBuilder();
        queryPathUpdate.Append(APIConstantsDef.API_ROOT); queryPathUpdate.Append("/");
        queryPathUpdate.Append(APIConstantsDef.API_BOOK); queryPathUpdate.Append("/");
        queryPathUpdate.Append(APIConstantsDef.API_BOOK_upload);
        var client = ClientFactory.CreateClient();
        if (valueRemoveBooksGenres)
        {
            StringBuilder queryBooksDelete = new StringBuilder();
            queryBooksDelete.Append(APIConstantsDef.API_ROOT); queryBooksDelete.Append("/");
            queryBooksDelete.Append(APIConstantsDef.API_BOOK); queryBooksDelete.Append("/");
            queryBooksDelete.Append(APIConstantsDef.API_delall);
            var requestDeleteB = new HttpRequestMessage(HttpMethod.Delete, apiPath.ToString() + "/" + queryBooksDelete.ToString());
            await client.SendAsync(requestDeleteB);

            StringBuilder queryCategoryDelete = new StringBuilder();
            queryCategoryDelete.Append(APIConstantsDef.API_ROOT); queryCategoryDelete.Append("/");
            queryCategoryDelete.Append(APIConstantsDef.API_BOOK); queryCategoryDelete.Append("/");
            queryCategoryDelete.Append(APIConstantsDef.API_delall);
            var requestDeleteC = new HttpRequestMessage(HttpMethod.Delete, apiPath.ToString() + "/" + queryCategoryDelete.ToString());
            await client.SendAsync(requestDeleteC);
        }

        var requestUpload = new HttpRequestMessage(HttpMethod.Get, apiPath.ToString() + "/" + queryPathUpdate.ToString());
        requestUpload.Headers.Add("Accept", "application/json");
        

        var response = await client.SendAsync(requestUpload);
    }
}